21 Steps to Get Started with Apache Spark using Scala 
 Introduction 
 If you ask any industry expert what language should you learn for big data, they would definitely suggest you to start with Scala. Scala has gained a lot of recognition for itself and is used by a large number of companies. Scala and Spark are being used at Facebook, Pinterest, NetFlix, Conviva, TripAdvisor for Big Data and Machine Learning applications. 
 Still not convinced? Look at this trend of number of job postings for Scala on Indeed.com: 
 But learning a new language can be intimidating. To help you learn Scala from scratch, I have created this comprehensive guide. The guide is aimed at beginners and enables you to write simple codes in Apache Spark using Scala. I have kept the content simple to get you started. 
 By the end of this guide, you will have a thorough understanding of working with Apache Spark in Scala. Read on to learn one more language and add more skills to your resume. 
 Table of Contents 
 This guide is broadly divided into 2 parts. The first part is from section 1 to 14 where we discuss language Scala. Section 15 onwards is how we used Scala in Apache Spark. 
 What is Scala? 
 About Scala 
 Installing Scala 
 Prerequisites for Scala 
 Choosing a development environment 
 Scala Basics Terms 
 Things to note about Scala 
 Variable declaration in Scala 
 Operations on variables 
 The if-else expression in Scala 
 Iteration in Scala 
 Declare a simple function in Scala and call it by passing value 
 Some Data Structures in Scala 
 Write/Run codes in Scala using editor 
 Advantages of using Scala for Apache Spark 
 Comparing Scala, java, Python and R in Apache Spark 
 Installing Apache Spark 
 Working with RDD in Apache Spark using Scala 
 Working with DataFrame in Apache Spark using Scala 
 Building a Machine Learning Model 
 Additional Resources 
 1. What is Scala 
 Scala is an acronym for “Scalable Language”. It is a general-purpose programming language designed for the programmers who want to write programs in a concise, elegant, and type-safe way. Scala enables programmers to be more productive. Scala is developed as an object-oriented and functional programming language. 
 If you write a code in Scala, you will see that the style is similar to a scripting language. Even though Scala is a new language, it has gained enough users and has a wide community support. It is one of the most user-friendly languages. 
 2. About Scala 
 The design of Scala started in 2001 in the programming methods laboratory at EPFL (École Polytechnique Fédérale de Lausanne). Scala made its first public appearance in January 2004 on the JVM platform and a few months later in June 2004, it was released on the .(dot)NET platform. The .(dot)NET support of Scala was officially dropped in 2012. A few more characteristics of Scala are: 
 2.1 Scala is pure Object-Oriented programming language 
 Scala is an object-oriented programming language. Everything in Scala is an object and any operations you perform is a method call. Scala, allow you to add new operations to existing classes with the help of implicit classes. 
 One of the advantages of Scala is that it makes it very easy to interact with Java code. You can also write a Java code inside Scala class. The Scala supports advanced component architectures through classes and traits. 
 2.2 Scala is a functional language 
 Scala is a programming language that has implemented major functional programming concepts. In Functional programming, every computation is treated as a mathematical function which avoids states and mutable data. The functional programming exhibits following characteristics: 
 Power and flexibility 
 Simplicity 
 Suitable for parallel processing 
 Scala is not a pure functional language. Haskell is an example of a pure functional language. If you want to read more about functional programming, please refer to this article. 
 2.3 Scala is a compiler based language (and not interpreted) 
 Scala is a compiler based language which makes Scala execution very fast if you compare it with Python (which is an interpreted language). The compiler in Scala works in similar fashion as Java compiler. It gets the source code and generates Java byte-code that can be executed independently on any standard JVM (Java Virtual Machine). If you want to know more about the difference between complied vs interpreted language please refer this article. 
 There are more important points about Scala which I have not covered. Some of them are: 
 Scala has thread based executors 
 Scala is statically typed language 
 Scala can execute Java code 
 You can do concurrent and Synchronized processing in Scala 
 Scala is JVM based languages 
 2.4 Companies using Scala 
 Scala is now big name. It is used by many companies to develop the commercial software. These are the following notable big companies which are using Scala as a programming alternative. 
 LinkedIn 
 Twitter 
 Foursquare 
 Netflix 
 Tumblr 
 The Guardian 
 Precog 
 Sony 
 AirBnB 
 Klout 
 Apple 
 If you want to read more about how and when these companies started using Scala please refer this blog. 
 3. Installing Scala 
 Scala can be installed in any Unix or windows based system. Below are the steps to install for Ubuntu (14.04) for scala version 2.11.7. I am showing the steps for installing Scala (2.11.7) with Java version 7. It is necessary to install Java before installing Scala. You can also install latest version of Scala(2.12.1) as well. 
 If you are asked to accept Java license terms, click on “Yes” and proceed. Once finished, let us check whether Java has installed successfully or not. To check the Java version and installation, you can type: 
 4. Prerequisites for Learning Scala 
 Scala being an easy to learn language has minimal prerequisites. If you are someone with basic knowledge of C/C++, then you will be easily able to get started with Scala. Since Scala is developed on top of Java. Basic programming function in Scala is similar to Java. So, if you have some basic knowledge of Java syntax and OOPs concept, it would be helpful for you to work in Scala. 
 5. Choosing a development environment 
 Once you have installed Scala, there are various options for choosing an environment. Here are the 3 most common options: 
 Terminal / Shell based 
 Notepad / Editor based 
 IDE (Integrated development environment) 
 Choosing right environment depends on your preference and use case. I personally prefer writing a program on shell because it provides a lot of good features like suggestions for method call and you can also run your code while writing line by line. 
 Warming up: Running your first Scala program in Shell:
Let’s write a first program which adds two numbers. 
 6. Scala Basics Terms 
 Object: An entity that has state and behavior is known as an object. For example: table, person, car etc. 
 Class: A class can be defined as a blueprint or a template for creating different objects which defines its properties and behavior. 
 Method: It is a behavior of a class. A class can contain one or more than one method. For example: deposit can be considered a method of bank class. 
 Closure: Closure is any function that closes over the environment in which it’s defined. A closure returns value depends on the value of one or more variables which is declared outside this closure. 
 Traits: Traits are used to define object types by specifying the signature of the supported methods. It is like interface in java. 
 7. Things to note about Scala 
 It is case sensitive 
 If you are writing a program in Scala, you should save this program using “.scala” 
 Scala execution starts from main() methods 
 Any identifier name cannot begin with numbers. For example, variable name “123salary” is invalid. 
 You can not use Scala reserved keywords for variable declarations or constant or any identifiers. 
 8. Variable declaration in Scala 
 In Scala, you can declare a variable using ‘var’ or ‘val’ keyword. The decision is based on whether it is a constant or a variable. If you use ‘var’ keyword, you define a variable as mutable variable. On the other hand, if you use ‘val’, you define it as immutable. Let’s first declare a variable using “var” and then using “val”. 
 8.1 Declare using var 
 var Var1 : String = "Ankit" 
 In the above Scala statement, you declare a mutable variable called “Var1” which takes a string value. You can also write the above statement without specifying the type of variable. Scala will automatically identify it. For example: 
 var Var1 = "Gupta" 
 8.2 Declare using val 
 val Var2 : String = "Ankit" 
 In the above Scala statement, we have declared an immutable variable “Var2” which takes a string “Ankit”. Try it for without specifying the type of variable. If you want to read about mutable and immutable please refer this link. 
 9. Operations on variables 
 You can perform various operations on variables. There are various kinds of operators defined in Scala. For example: Arithmetic Operators, Relational Operators, Logical Operators, Bitwise Operators, Assignment Operators. 
 Lets see “+” , “==” operators on two variables ‘Var4’, “Var5”. But, before that, let us first assign values to “Var4” and “Var5”. 
 Apply ‘+’ operator 
 Var4+Var5
Output:
res1: Int = 5 
 Apply “==” operator 
 Var4==Var5
Output:
res2: Boolean = false 
 If you want to know complete list of operators in Scala refer this link: 
 10. The if-else expression in Scala 
 In Scala, if-else expression is used for conditional statements. You can write one or more conditions inside “if”. Let’s declare a variable called “Var3” with a value 1 and then compare “Var3” using if-else expression. 
 Scala also supports “while” and “do while” loops. If you want to know how both work, please refer this link. 
 12. Declare a simple function in Scala and call it by passing value 
 You can define a function in Scala using “def” keyword. Let’s define a function called “mul2” which will take a number and multiply it by 10. You need to define the return type of function, if a function not returning any value you should use the “Unit” keyword. 
 In the below example, the function returns an integer value. Let’s define the function “mul2”: 
 def mul2(m: Int): Int = m * 10
Output: mul2: (m: Int)Int 
 Now let’s pass a value 2 into mul2 
 mul2(2)
Output:
res9: Int = 20 
 If you want to read more about the function, please refer this tutorial. 
 13. Few Data Structures in Scala 
 Arrays 
 Lists 
 Sets 
 Tuple 
 Maps 
 Option 
 13.1 Arrays in Scala 
 In Scala, an array is a collection of similar elements. It can contain duplicates. Arrays are also immutable in nature. Further, you can access elements of an array using an index: 
 Declaring Array in Scala 
 To declare any array in Scala, you can define it either using a new keyword or you can directly assign some values to an array. 
 As mentioned before, if you are familiar with Java, it will be easier for you to understand Scala. If you know Java, you can easily see that the structure of above “HelloWorld” program is very similar to Java program. 
 This program contains a method “main” (not returning any value) which takes an argument – a string array through command line. Next, it calls a predefined method called “Println” and passes the argument “Hello, world!”. 
 You can define the main method as static in Java but in Scala, the static method is no longer available. Scala programmer can’t use static methods because they use singleton objects. To read more about singleton object you can refer this article. 
 14.1 Compile a Scala Program 
 To run any Scala program, you first need to compile it. “Scalac” is the compiler which takes source program as an argument and generates object files as output. 
 Let’s start compiling your “HelloWorld” program using the following steps: 
 1. For compiling it, you first need to paste this program into a text file then you need to save this program as HelloWorld.scala
2. Now you need change your working directory to the directory where your program is saved
3. After changing the directory you can compile the program by issuing the command. 
 scalac HelloWorld.scala 
 4. After compiling, you will get Helloworld.class as an output in the same directory. If you can see the file, you have successfully compiled the above program. 
 14.2 Running Scala Program 
 After compiling, you can now run the program using following command: 
 scala HelloWorld 
 You will get an output if the above command runs successfully. The program will print “Hello, world!” 
 15. Advantages of using Scala for Apache Spark 
 If you are working with Apache Spark then you would know that it has 4 different APIs support for different languages: Scala, Java, Python and R. 
 Each of these languages have their own unique advantages. But using Scala is more advantageous than other languages. These are the following reasons why Scala is taking over big data world. 
 Working with Scala is more productive than working with Java 
 Scala is faster than Python and R because it is compiled language 
 Scala is a functional language 
 16. Comparing Scala, Java, Python and R APIs in Apache Spark 
 Let’s compare 4 major languages which are supported by Apache Spark API. 
 Metrics 
 Scala 
 Java 
 Python 
 R 
 Type 
 Compiled 
 Compiled 
 Interpreted 
 Interpreted 
 JVM based 
 Yes 
 Yes 
 No 
 No 
 Verbosity 
 Less 
 More 
 Less 
 Less 
 Code Length 
 Less 
 More 
 Less 
 Less 
 Productivity 
 High 
 Less 
 High 
 High 
 Scalability 
 High 
 High 
 Less 
 Less 
 OOPS Support 
 Yes 
 Yes 
 Yes 
 Yes 
 17. Install Apache Spark & some basic concepts about Apache Spark 
 To know the basics of Apache Spark and installation, please refer to my first article on Pyspark. I have introduced basic terminologies used in Apache Spark like big data, cluster computing, driver, worker, spark context, In-memory computation, lazy evaluation, DAG, memory hierarchy and Apache Spark architecture in the previous article. 
 As a quick refresher, I will be explaining some of the topics which are very useful to proceed further. If you are a beginner, then I strongly recommend you to go through my first article before proceeding further. 
 Lazy operation: Operations which do not execute until we require results. 
 Spark Context: holds a connection with Spark cluster manager. 
 Driver and Worker: A driver is in charge of the process of running the main() function of an application and creating the SparkContext. 
 Spark has three data representations viz RDD, Dataframe, Dataset. To use Apache Spark functionality, we must use one of them for data manipulation. Let’s discuss each of them briefly: 
 RDD: RDD (Resilient Distributed Database) is a collection of elements, that can be divided across multiple nodes in a cluster for parallel processing. It is also fault tolerant collection of elements, which means it can automatically recover from failures. RDD is immutable, we can create RDD once but can’t change it. 
 Dataset: It is also a distributed collection of data. A Dataset can be constructed from JVM objects and then manipulated using functional transformations (map, flatMap, filter, etc.). As I have already discussed in my previous articles, dataset API is only available in Scala and Java. It is not available in Python and R. 
 DataFrame: In Spark, a DataFrame is a distributed collection of data organized into named columns. It is conceptually equivalent to a table in a relational database or a data frame. It is mostly used for structured data processing. In Scala, a DataFrame is represented by a Dataset of Rows. A DataFrame can be constructed by wide range of arrays for example, existing RDDs, Hive tables, database tables. 
 Transformation: Transformation refers to the operation applied on a RDD to create new RDD. 
 Action: Actions refer to an operation which also apply on RDD that perform computation and send the result back to driver. 
 Broadcast: We can use the Broadcast variable to save the copy of data across all node. 
 Accumulator: In Accumulator, variables are used for aggregating the information. 
 18. Working with RDD in Apache Spark using Scala 
 First step to use RDD functionality is to create a RDD. In Apache Spark, RDD can be created by two different ways. One is from existing Source and second is from an external source. 
 So before moving further let’s open the Apache Spark Shell with Scala. Type the following command after switching into the home directory of Spark. It will also load the spark context as sc. 
 $ ./bin/spark-shell 
 After typing above command you can start programming of Apache Spark in Scala. 
 18.1 Creating a RDD from existing source 
 When you want to create a RDD from existing storage in driver program (which we would like to be parallelized). For example, converting an array to RDD, which is already created in a driver program. 
 In the above program, I first created an array for 10 elements and then I created a distributed data called RDD from that array using “parallelize” method. SparkContext has a parallelize method, which is used for creating the Spark RDD from an iterable already present in driver program. 
 To see the content of any RDD we can use “collect” method. Let’s see the content of distData. 
 18.2 Creating a RDD from External sources 
 You can create a RDD through external sources such as a shared file system, HDFS, HBase, or any data source offering a Hadoop Input Format. So let’s create a RDD from the text file: 
 The name of the text file is text.txt. and it has only 4 lines given below.
I love solving data mining problems.
I don’t like solving data mining problems.
I love solving data science problems.
I don’t like solving data science problems. 
 18.3 Transformations and Actions on RDD 
 18.3.1. Map Transformations 
 A map transformation is useful when we need to transform a RDD by applying a function to each element. So how can we use map transformation on ‘rdd’ in our case?
Let’s calculate the length (number of characters) of each line in “text.txt” 
 19. Working with DataFrame in Apache Spark using Scala 
 It can be created using different data formats. For example, by loading the data from JSON, CSV 
 Loading data from Existing RDD 
 Programmatically specifying schema 
 Let’s create a DataFrame using a csv file and perform some analysis on that. 
 For reading a csv file in Apache Spark, we need to specify a new library in our Scala shell. To perform this action, first, we need to download Spark-csv package (Latest version) and extract this package into the home directory of Spark. Then, we need to open a PySpark shell and include the package ( I am using “spark-csv_2.10:1.3.0”). 
 $ ./bin/spark-shell --packages com.databricks:spark-csv_2.10:1.3.0 
 Now let’s load the csv file into a DataFrame df. You can download the file(train) from this link. 
 In above DataFrame df1 “User_ID”,”Occupation” and “Marital_Status” are features and “Purchase” is target column. 
 Let’s try to create a formula for Machine learning model like we do in R. First, we need to import RFormula. Then we need to specify the dependent and independent column inside this formula. We also have to specify the names for features column and label column. 
 After creating the formula, we need to fit this formula on df1 and transform df1 through this formula. Let’s fit this formula. 
 val train = formula.fit(df1).transform(df1) 
 After applying the formula we can see that train dataset has 2 extra columns called features and label. These are the ones we have specified in the formula (featuresCol=”features” and labelCol=”label”) 
 20.1 Applying Linear Regression on train 
 After applying the RFormula and transforming the DataFrame, we now need to develop the machine learning model on this data. I want to apply a Linear Regression for this task. Let us import a Linear regression and apply on train. Before fitting the model, I am setting the hyperparameters. 
 End Notes 
 In this article, I have provided a practical hands on guide for Scala. I introduced you to write basic programs using Scala, some important points about Scala and how companies are using Scala. 
 I then refreshed some of the basic concepts of Apache Spark which I have already covered in my PySpark article and built a machine learning model in Apache Spark using Scala. If you have any questions or doubts, feel free to post them in the comments section. 
 I´m starting on data science tecniques, but had worked with app development in java for 18 years. Right now I’m choosing the best programming language for data science on my company, that has a huge legacy code base in java. I was thinking about python beause of scikit-learn and his others related APIs, but for my colleagues learn and migrate to a completely different language tends to be hard.
After reading your article, I should consider Scala. So I question if there are APIs for data science to rich as has in Python… 
 Hi Amit,
Thanks to share valuable resource to learn scala. I recommend scala cookbook to learn scala easily. Scala is type safe and pure object oriented languages and multi paradigm language (oops & functional) so that most of the developers and organizations switching to scala. I am also one of a person 
 This is a very informative article. I also agree with your post title and your really well explain your point of view. I am very happy to see this post. Thanks for share with us. Keep it up and share the more most related post. 
 Thank you Navindra. I have already given the link in the article but for downloading the dataset you first need to register yourself in the competition. Incase you are not able to locate the link in the article, please find the link here: https://datahack.analyticsvidhya.com/contest/black-friday/ 
 Thank you Navindra. I have already given the link in the article but for downloading the dataset you first need to register yourself in the competition. Incase you are not able to locate the link in the article, please find the link here: https://datahack.analyticsvidhya.com/contest/black-friday/ 
 Hi, THANK YOU
i found it very interesting but when i try it with my own data i got this error !!!!!!
org.apache.spark.SparkException: Failed to execute user defined function($anonfun$3: (struct) => vector)
please can you help me 
 I am commenting to let you know what a terrific experience I enjoyed reading through your web page.
Nice blog. Thank you for sharing. The information you shared about the 21 steps getting spark using Scala is very effective for learners I have got some important suggestions from it 
 Can you please explain briefly how the fit method in the last step of the article recognized our features and label.
( val lrModel = lr.fit(train_cv1) )
Because, the method here is receiving a dataset train_cv1 as a parameter containing many columns without knowing anything about the features and the label. It’s true that you precised the features and the label in the the Rformula but the LinearRegression has no relationship with the RFormula. The linearRegression is treating a separate dataset called train_cv1 without considering what was done previously. 
 